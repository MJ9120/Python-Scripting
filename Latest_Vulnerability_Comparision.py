from openpyxl import load_workbook

def get_header_index(headers, header_name):
    try:
        return headers.index(header_name.strip())
    except ValueError:
        print(f"Header '{header_name}' not found in the headers: {headers}")
        return None

def get_column_indices(headers, header_names):
    return {header_name: get_header_index(headers, header_name) for header_name in header_names}

# Define the file paths
old_file_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\DHC_Old.xlsx'  # Change the Old file name here
new_file_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\DHC_New.xlsx'  # Change New file name here
output_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\Updated_DHC_Vul_file.xlsx'  # Change the Output file name here

# Load the Excel workbooks
old_wb = load_workbook(old_file_path)
new_wb = load_workbook(new_file_path)

# Select the active sheets
old_ws = old_wb.active
new_ws = new_wb.active

# Get header indices for the old and new workbooks
old_headers = [str(cell.value).strip() for cell in old_ws[1]]
new_headers = [str(cell.value).strip() for cell in new_ws[1]]

# Define header names exactly as they appear in your files
required_headers = ['Component Name', 'Component Version', 'CVE ID', 'Match Type', 'Developer Comments', 'OSS Comments']

# Get column indices for required headers in old and new workbooks
old_indices = get_column_indices(old_headers, required_headers)
new_indices = get_column_indices(new_headers, required_headers)

# Check if all required indices are found
if None in old_indices.values() or None in new_indices.values():
    print("One or more required headers are missing. Please check the headers in your Excel files.")
else:
    # Create dictionaries to map component names, component versions, CVE IDs, and match types to comments
    old_comments = {}
    for row in old_ws.iter_rows(min_row=2, values_only=True):
        component_name = str(row[old_indices['Component Name']]).strip() if row[old_indices['Component Name']] else ''
        component_version = str(row[old_indices['Component Version']]).strip() if row[old_indices['Component Version']] else ''
        cve_id = str(row[old_indices['CVE ID']]).strip() if row[old_indices['CVE ID']] else ''
        match_type = str(row[old_indices['Match Type']]).strip() if row[old_indices['Match Type']] else ''
        developer_comments = row[old_indices['Developer Comments']] if len(row) > old_indices['Developer Comments'] else None
        oss_comments = row[old_indices['OSS Comments']] if len(row) > old_indices['OSS Comments'] else None
        old_comments[(component_name, component_version, cve_id, match_type)] = (developer_comments, oss_comments)

    # Update the new workbook with comments from the old workbook
    for row in new_ws.iter_rows(min_row=2):
        component_name = str(row[new_indices['Component Name']].value).strip() if row[new_indices['Component Name']].value else ''
        component_version = str(row[new_indices['Component Version']].value).strip() if row[new_indices['Component Version']].value else ''
        cve_id = str(row[new_indices['CVE ID']].value).strip() if row[new_indices['CVE ID']].value else ''
        match_type = str(row[new_indices['Match Type']].value).strip() if row[new_indices['Match Type']].value else ''
        if (component_name, component_version, cve_id, match_type) in old_comments:
            developer_comments, oss_comments = old_comments[(component_name, component_version, cve_id, match_type)]
            row[new_indices['Developer Comments']].value = developer_comments  # Update Developer Comments
            row[new_indices['OSS Comments']].value = oss_comments              # Update OSS Comments

    # Save the updated workbook
    new_wb.save(output_path)

    print(f"Updated report saved to {output_path}")
