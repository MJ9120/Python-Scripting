from openpyxl import load_workbook

def get_header_index(headers, header_name):
    try:
        return headers.index(header_name.strip())
    except ValueError:
        print(f"Header '{header_name}' not found in the headers: {headers}")
        return None

def get_column_indices(headers, header_names):
    return {header_name: get_header_index(headers, header_name) for header_name in header_names}

# Define the file paths
cc_old_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\DHC_Old.xlsx'
cc_new_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\DHC_New.xlsx'
output_path = r'C:\Users\Manjunath_MJalade\OneDrive - Dell Technologies\Desktop\Excel\DHC_New_Updated.xlsx'

# Load the Excel workbooks
cc_old_wb = load_workbook(cc_old_path)
cc_new_wb = load_workbook(cc_new_path)

# Process the 'Unapproved' sheet
cc_old_ws_unapproved = cc_old_wb['Unapproved']
cc_new_ws_unapproved = cc_new_wb['Unapproved']

# Get header indices for the old and new 'Unapproved' sheets
cc_old_headers_unapproved = [str(cell.value).strip() for cell in cc_old_ws_unapproved[1]]
cc_new_headers_unapproved = [str(cell.value).strip() for cell in cc_new_ws_unapproved[1]]

# Define header names exactly as they appear in your files
required_headers_unapproved = ['Name', 'Files', 'Match Type', 'Column B Status', 'Column C Status']

# Get column indices for required headers in old and new 'Unapproved' sheets
cc_old_indices_unapproved = get_column_indices(cc_old_headers_unapproved, required_headers_unapproved)
cc_new_indices_unapproved = get_column_indices(cc_new_headers_unapproved, required_headers_unapproved)

# Check if all required indices are found
if None in cc_old_indices_unapproved.values() or None in cc_new_indices_unapproved.values():
    print("One or more required headers are missing in 'Unapproved' sheets. Please check the headers in your Excel files.")
else:
    # Create dictionaries to map Name, Files, and Match Type to Column B Status and Column C Status
    cc_old_statuses_unapproved = {}
    for row in cc_old_ws_unapproved.iter_rows(min_row=2, values_only=True):
        name = str(row[cc_old_indices_unapproved['Name']]).strip() if row[cc_old_indices_unapproved['Name']] else ''
        files = str(row[cc_old_indices_unapproved['Files']]).strip() if row[cc_old_indices_unapproved['Files']] else ''
        match_type = str(row[cc_old_indices_unapproved['Match Type']]).strip() if row[cc_old_indices_unapproved['Match Type']] else ''
        col_b_status = row[cc_old_indices_unapproved['Column B Status']] if len(row) > cc_old_indices_unapproved['Column B Status'] else None
        col_c_status = row[cc_old_indices_unapproved['Column C Status']] if len(row) > cc_old_indices_unapproved['Column C Status'] else None
        cc_old_statuses_unapproved[(name, files, match_type)] = (col_b_status, col_c_status)

    # Update the new 'Unapproved' sheet with statuses from the old 'Unapproved' sheet
    for row in cc_new_ws_unapproved.iter_rows(min_row=2):
        name = str(row[cc_new_indices_unapproved['Name']].value).strip() if row[cc_new_indices_unapproved['Name']].value else ''
        files = str(row[cc_new_indices_unapproved['Files']].value).strip() if row[cc_new_indices_unapproved['Files']].value else ''
        match_type = str(row[cc_new_indices_unapproved['Match Type']].value).strip() if row[cc_new_indices_unapproved['Match Type']].value else ''
        if (name, files, match_type) in cc_old_statuses_unapproved:
            col_b_status, col_c_status = cc_old_statuses_unapproved[(name, files, match_type)]
            row[cc_new_indices_unapproved['Column B Status']].value = col_b_status  # Update Column B Status
            row[cc_new_indices_unapproved['Column C Status']].value = col_c_status  # Update Column C Status
        else:
            # If no matching row is found, set 'Column B Status' and 'Column C Status' to 'Not Approved'
            row[cc_new_indices_unapproved['Column B Status']].value = 'Not Approved'
            row[cc_new_indices_unapproved['Column C Status']].value = 'Not Approved'

# Process the 'Vulnerability' sheet
cc_old_ws_vulnerability = cc_old_wb['Vulnerability']
cc_new_ws_vulnerability = cc_new_wb['Vulnerability']

# Get header indices for the old and new 'Vulnerability' sheets
cc_old_headers_vulnerability = [str(cell.value).strip() for cell in cc_old_ws_vulnerability[1]]
cc_new_headers_vulnerability = [str(cell.value).strip() for cell in cc_new_ws_vulnerability[1]]

# Define header names exactly as they appear in your files
required_headers_vulnerability = ['Component Name', 'Component Version', 'CVE ID', 'Match Type', 'Developer Comments', 'OSS Comments']

# Get column indices for required headers in old and new 'Vulnerability' sheets
cc_old_indices_vulnerability = get_column_indices(cc_old_headers_vulnerability, required_headers_vulnerability)
cc_new_indices_vulnerability = get_column_indices(cc_new_headers_vulnerability, required_headers_vulnerability)

# Check if all required indices are found
if None in cc_old_indices_vulnerability.values() or None in cc_new_indices_vulnerability.values():
    print("One or more required headers are missing in 'Vulnerability' sheets. Please check the headers in your Excel files.")
else:
    # Create dictionaries to map component names, component versions, CVE IDs, and match types to comments
    cc_old_comments_vulnerability = {}
    for row in cc_old_ws_vulnerability.iter_rows(min_row=2, values_only=True):
        component_name = str(row[cc_old_indices_vulnerability['Component Name']]).strip() if row[cc_old_indices_vulnerability['Component Name']] else ''
        component_version = str(row[cc_old_indices_vulnerability['Component Version']]).strip() if row[cc_old_indices_vulnerability['Component Version']] else ''
        cve_id = str(row[cc_old_indices_vulnerability['CVE ID']]).strip() if row[cc_old_indices_vulnerability['CVE ID']] else ''
        match_type = str(row[cc_old_indices_vulnerability['Match Type']]).strip() if row[cc_old_indices_vulnerability['Match Type']] else ''
        developer_comments = row[cc_old_indices_vulnerability['Developer Comments']] if len(row) > cc_old_indices_vulnerability['Developer Comments'] else None
        oss_comments = row[cc_old_indices_vulnerability['OSS Comments']] if len(row) > cc_old_indices_vulnerability['OSS Comments'] else None
        cc_old_comments_vulnerability[(component_name, component_version, cve_id, match_type)] = (developer_comments, oss_comments)

    # Update the new 'Vulnerability' sheet with comments from the old 'Vulnerability' sheet
    for row in cc_new_ws_vulnerability.iter_rows(min_row=2):
        component_name = str(row[cc_new_indices_vulnerability['Component Name']].value).strip() if row[cc_new_indices_vulnerability['Component Name']].value else ''
        component_version = str(row[cc_new_indices_vulnerability['Component Version']].value).strip() if row[cc_new_indices_vulnerability['Component Version']].value else ''
        cve_id = str(row[cc_new_indices_vulnerability['CVE ID']].value).strip() if row[cc_new_indices_vulnerability['CVE ID']].value else ''
        match_type = str(row[cc_new_indices_vulnerability['Match Type']].value).strip() if row[cc_new_indices_vulnerability['Match Type']].value else ''
        if (component_name, component_version, cve_id, match_type) in cc_old_comments_vulnerability:
            developer_comments, oss_comments = cc_old_comments_vulnerability[(component_name, component_version, cve_id, match_type)]
            row[cc_new_indices_vulnerability['Developer Comments']].value = developer_comments  # Update Developer Comments
            row[cc_new_indices_vulnerability['OSS Comments']].value = oss_comments              # Update OSS Comments

    # Save the updated workbook
    cc_new_wb.save(output_path)
    print(f"Updated report saved to {output_path}")

